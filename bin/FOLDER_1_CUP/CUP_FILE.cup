/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		//System.exit(0);
//		System.out.println("Message = " + message + " \n");
//		System.out.println("done reporting error\n");
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
//	System.out.println("done writing symbol\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal CLASS;
terminal ARRAY;
terminal EXTENDS;
terminal NIL;
terminal RETURN;
terminal NEW;
terminal GT;
terminal LT;
terminal COMMA;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROG Program;
non terminal AST_DEC_LIST decList;
non terminal AST_DEC dec;
non terminal AST_VAR_DEC varDec;
non terminal AST_F_DEC funcDec;
non terminal AST_FUNC_DEC_PARAMS funcDecParams;
non terminal AST_FUNC_DEC_PARAMS_LIST funcDecParamList;
non terminal AST_DEC_CLASSDEC classDec;
non terminal AST_C_FIELD_LIST cFieldList;
non terminal AST_A_DEC arrayDec;
non terminal AST_STMT_LIST stmtList;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_EXP exp;
non terminal AST_EXP_PARAMS functionParams;
non terminal AST_EXP_PARAMS_LIST paramList;
non terminal AST_NEW_EXP newExp;
non terminal AST_C_FIELD cField;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;

/************************/
/* START WITH: stmtList */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

Program		::=		decList:l 			{: RESULT = new AST_PROG(l,lleft+1); :}
					;
					
decList 	::= 	dec:head decList:body 			{: RESULT = new AST_DEC_LIST(head, body, headleft+1); :}
					| dec:head		{: RESULT = new AST_DEC_LIST(head, null, headleft+1); :}

					;

dec 		::=		varDec:vDec 				{: RESULT = vDec; :}
					| funcDec:fDec 			{: RESULT = fDec; :}
					| classDec:cDec 		{: RESULT = cDec; :}
					| arrayDec:aDec 		{: RESULT = aDec; :}
					;
 
varDec 		::=		ID:type ID:name ASSIGN exp:e SEMICOLON 			{: RESULT = new AST_V_DEC(type, name,e, null, typeleft+1); :}
					| ID:type ID:name ASSIGN newExp:e SEMICOLON 	{: RESULT = new AST_V_DEC(type, name, null, e, typeleft+1); :}
					| ID:type ID:name SEMICOLON 			{: RESULT = new AST_V_DEC(type, name, null, null, typeleft+1); :}
					;

funcDec 	::=		ID:type ID:name LPAREN RPAREN LBRACE stmtList:l RBRACE 					{: RESULT = new AST_F_DEC(type, name, null, l, typeleft+1); :}
					| ID:type ID:name LPAREN funcDecParams:params RPAREN LBRACE stmtList:l RBRACE 	{: RESULT = new AST_F_DEC(type, name, params, l, typeleft+1); :}
					;

funcDecParams 	::= 	ID:type	ID:name	funcDecParamList:l 				{: RESULT = new AST_FUNC_DEC_PARAMS(type, name, l, typeleft+1); :}
							| ID:type ID:name 		{: RESULT = new AST_FUNC_DEC_PARAMS(type, name, null, typeleft+1); :}
						;

funcDecParamList	::=		COMMA ID:type ID:name funcDecParamList:body 		{: RESULT = new AST_FUNC_DEC_PARAMS_LIST(type, name, body, typeleft+1); :}
							| COMMA ID:type ID:name 		{: RESULT = new AST_FUNC_DEC_PARAMS_LIST(type, name, null, typeleft+1); :}
							;

classDec 	::=		CLASS ID:name LBRACE cFieldList:body RBRACE				{: RESULT = new AST_DEC_CLASSDEC(name, null, body, nameleft+1); :}
					| CLASS ID:name EXTENDS ID:sname LBRACE cFieldList:body RBRACE 	{: RESULT = new AST_DEC_CLASSDEC(name, sname, body, nameleft+1); :}
					;

cFieldList	    ::=		cField:c cFieldList:l				{: RESULT = new AST_C_FIELD_LIST(c, l, cleft+1); :}
				    	| cField:c				{: RESULT = new AST_C_FIELD_LIST(c, null, cleft+1); :}
				    	;

arrayDec 	::=		ARRAY ID:name EQ ID:type LBRACK RBRACK 		{: RESULT = new AST_A_DEC(name, type, nameleft+1); :}
					;

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l,sleft+1);    :}
					| stmt:s		{: RESULT = new AST_STMT_LIST(s,null,sleft+1); :}
					;

var			::=		ID:name						{: RESULT = new AST_VAR_SIMPLE(name,nameleft+1);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName,vleft+1); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e,vleft+1);     :} 
					;
					
stmt		::=		varDec:vDec 													{: RESULT = new AST_STMT_VARDEC(vDec,vDecleft+1); :} 
					| var:v ASSIGN exp:e SEMICOLON										{: RESULT = new AST_STMT_ASSIGN(v,e, null, vleft+1); :}
					| var:v ASSIGN newExp:e SEMICOLON									{: RESULT = new AST_STMT_ASSIGN(v,null, e, vleft+1); :}
					| RETURN SEMICOLON:s 											{: RESULT = new AST_STMT_RETURN(null,sleft+1); :} 
					| RETURN exp:e SEMICOLON 										{: RESULT = new AST_STMT_RETURN(e,eleft+1); :} 
					| IF LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE							{: RESULT = new AST_STMT_IF(cond,body,condleft+1); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE						{: RESULT = new AST_STMT_WHILE(cond,body,condleft+1); :}
					| var:v DOT ID:funcName LPAREN functionParams:params RPAREN SEMICOLON 					{: RESULT = new AST_STMT_FUNC(v, funcName, params,funcNameleft+1); :}
					| var:v DOT ID:funcName LPAREN RPAREN SEMICOLON 							{: RESULT = new AST_STMT_FUNC(v, funcName, null,funcNameleft+1); :}
					| ID:funcName LPAREN functionParams:params RPAREN SEMICOLON		   				{: RESULT = new AST_STMT_FUNC(null, funcName, params,funcNameleft+1); :}
					| ID:funcName LPAREN RPAREN	SEMICOLON	   							{: RESULT = new AST_STMT_FUNC(null, funcName, null,funcNameleft+1); :}
					;

exp			::=		var:v								{: RESULT = new AST_EXP_VAR(v,vleft+1);          :}
					| LPAREN exp:e RPAREN						{: RESULT = new AST_EXP_PAREN(e,eleft+1); :}
					| exp:e1 PLUS  exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, 0, e1left+1); :}
					| exp:e1 MINUS exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, 1, e1left+1); :}
					| exp:e1 TIMES exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, 2, e1left+1); :}	
					| exp:e1 DIVIDE exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, 3, e1left+1); :}
					| exp:e1 LT exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, 4, e1left+1);:}
					| exp:e1 GT exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, 5, e1left+1);:}
					| exp:e1 EQ exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, 6, e1left+1);:}
					| var:v DOT ID:funcName LPAREN functionParams:params RPAREN 	{: RESULT = new AST_EXP_FUNC(v, funcName, params,vleft+1); :}
					| var:v DOT ID:funcName LPAREN RPAREN 				{: RESULT = new AST_EXP_FUNC(v, funcName, null,vleft+1); :}
					| ID:funcName LPAREN functionParams:params RPAREN		{: RESULT = new AST_EXP_FUNC(null, funcName, params,funcNameleft+1); :}
					| INT:i								{: RESULT = new AST_EXP_INT(i,ileft+1);          :}
					| MINUS INT:i 							{: RESULT = new AST_EXP_MINUS_INT(i,ileft+1); :}
					| ID:funcName LPAREN RPAREN		   			{: RESULT = new AST_EXP_FUNC(null, funcName, null,funcNameleft+1); :}
					| NIL:n								{: RESULT = new AST_EXP_NIL(nleft+1); :}
					| STRING:s 							{: RESULT = new AST_EXP_STRING(s,sleft+1); :}
					;

functionParams 		::=		exp:e 	paramList:l 						{: RESULT = new AST_EXP_PARAMS(e, l, eleft+1); :}
					| 		exp:e						{: RESULT = new AST_EXP_PARAMS(e, null, eleft+1); :}
					;

paramList	::=		COMMA exp:e 								{: RESULT = new AST_EXP_PARAMS_LIST(e, null, eleft+1); :}
					| COMMA exp:e paramList:l					{: RESULT = new AST_EXP_PARAMS_LIST(e, l, eleft+1); :}
					;

newExp 		::=		NEW ID:type								{: RESULT = new AST_NEW_EXP_IMPL(type,null, typeleft+1); :}
					| NEW ID:type LBRACK exp:e RBRACK				{: RESULT = new AST_NEW_EXP_IMPL(type,e, typeleft+1); :} 
					;

cField		::=		varDec:vdec								{: RESULT = new AST_C_FIELD_VARDEC(vdec,vdecleft+1); :}
				    | funcDec:fdec							{: RESULT = new AST_C_FIELD_FUNCDEC(fdec,fdecleft+1); :}
				    ;
